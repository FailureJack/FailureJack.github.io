{"title":"pimDB:From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories","uid":"af9363059dee9d3cec07c0eec58cd7d5","slug":"pimDB  From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories","date":"2023-11-28T11:02:22.098Z","updated":"2023-12-29T04:09:25.593Z","comments":true,"path":"api/articles/pimDB  From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories.json","keywords":null,"cover":"/cover/pimDB  From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories.png","content":"<h1 id=\"pimDB-From-Main-Memory-DBMS-to-Processing-In-Memory-DBMS-Engines-on-Intelligent-Memories\"><a href=\"#pimDB-From-Main-Memory-DBMS-to-Processing-In-Memory-DBMS-Engines-on-Intelligent-Memories\" class=\"headerlink\" title=\"pimDB: From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories\"></a>pimDB: From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories</h1><h2 id=\"Motivation\"><a href=\"#Motivation\" class=\"headerlink\" title=\"Motivation\"></a>Motivation</h2><ul>\n<li>仍然是 PIM 的动机，减少数据搬移</li>\n<li>利用新硬件 UPMEM 构建 DBMS engine pimDB</li>\n</ul>\n<h2 id=\"Design\"><a href=\"#Design\" class=\"headerlink\" title=\"Design\"></a>Design</h2><p align=\"center\"><img src=\"/img/pimDB  From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories/G1iZb5GKCoNovcxbYTbcRqdJnwc.png\"></p>\n\n<ul>\n<li>内存数据库</li>\n<li>既可以 CPU-DRAM 方式工作，也可以 DPU-UPMEM 方式工作</li>\n<li>两种 Page Format：</li>\n</ul>\n<p align=\"center\"><img src=\"/img/pimDB  From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories/EQ2UbXtWLo1DeTxs4DWcX00lnRc.png\"></p>\n\n<h2 id=\"Evaluation\"><a href=\"#Evaluation\" class=\"headerlink\" title=\"Evaluation\"></a>Evaluation</h2><ul>\n<li>Intel Xeon Silver 4110 CPUs （16 核 32 线程）</li>\n<li>125GB of DRAM（非 PIM）</li>\n<li>20 PIM DIMMs（2560 DPUs，160GB memory)，因故障实际上只有 2496 DPUs 可用</li>\n<li>TPC-H orderline table</li>\n</ul>\n<h3 id=\"TPC-H\"><a href=\"#TPC-H\" class=\"headerlink\" title=\"TPC-H\"></a>TPC-H</h3><ul>\n<li>TPC-H 是用来评估在线分析处理的基准程序，主要模拟了供应商和采购商之间的交易行为，其中包含针对 8 张表的 22 条分析型<strong>查询</strong></li>\n<li>TPC-H 模型是典型的雪花模型，一共有 8 张表，其中 nation（国家）和 region（区域）两张表的数据量是固定的，其余 6 张表的数据量跟<strong>比例因子 SF（Scale Factor）</strong>相关，可以指定为 1,100,1000 等，分别代表 1 GB、100GB、1000GB，根据指定的 SF 确定每张表的数据量<table>\n<thead>\n<tr>\n<th>实验</th>\n<th>CPU 线程</th>\n<th>DPU 个数</th>\n<th>Tasklet 数</th>\n<th>DMA Transfer size</th>\n<th>Page format</th>\n<th>SF</th>\n<th>operation</th>\n<th>selectivity</th>\n<th>attribute 个数</th>\n<th>物化策略</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>变量</td>\n<td>变量(CPU 未知)</td>\n<td>11</td>\n<td>没说</td>\n<td>变量</td>\n<td>变量</td>\n<td>scan-and-select</td>\n<td>50%</td>\n<td>1</td>\n<td>/</td>\n</tr>\n<tr>\n<td>2</td>\n<td>变量</td>\n<td>变量(CPU 未知)</td>\n<td>11</td>\n<td>没说</td>\n<td>变量</td>\n<td>1</td>\n<td>scan-and-select</td>\n<td>50%</td>\n<td>1</td>\n<td>/</td>\n</tr>\n<tr>\n<td>3</td>\n<td>32</td>\n<td>64</td>\n<td>11</td>\n<td>变量</td>\n<td>变量</td>\n<td>变量</td>\n<td>scan-and-select</td>\n<td>50%</td>\n<td>1</td>\n<td>/</td>\n</tr>\n<tr>\n<td>4</td>\n<td>没说(32)</td>\n<td>变量</td>\n<td>没说(11)</td>\n<td>没说</td>\n<td>变量</td>\n<td>变量</td>\n<td>scan-and-select</td>\n<td>50%</td>\n<td>没说(1)</td>\n<td>/</td>\n</tr>\n<tr>\n<td>5</td>\n<td>没说(32)</td>\n<td>64</td>\n<td>变量</td>\n<td>变量</td>\n<td>变量</td>\n<td>8</td>\n<td>scan-and-select</td>\n<td>50%</td>\n<td>没说(1)</td>\n<td>/</td>\n</tr>\n<tr>\n<td>6</td>\n<td>没说(32)</td>\n<td>64</td>\n<td>11</td>\n<td>32B</td>\n<td>变量</td>\n<td>没说</td>\n<td>Aggregation</td>\n<td>50%</td>\n<td>变量</td>\n<td>/</td>\n</tr>\n<tr>\n<td>7</td>\n<td>没说(32)</td>\n<td>64</td>\n<td>11</td>\n<td>64B</td>\n<td>变量</td>\n<td>1</td>\n<td>scan-and-select</td>\n<td>变量(DPU 变时 50%)</td>\n<td></td>\n<td>变量</td>\n</tr>\n<tr>\n<td>8</td>\n<td></td>\n<td>变量</td>\n<td></td>\n<td></td>\n<td>变量</td>\n<td></td>\n<td>变量</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n</li>\n<li>数据在 PIM 内存中是如何分布的？平均？</li>\n<li>DPU 的空间够吗？（640 个 DPU 怎么装 80GB）（8 个 DPU 怎么装 1GB）</li>\n</ul>\n<h3 id=\"实验-1-CPU-vs-PIM\"><a href=\"#实验-1-CPU-vs-PIM\" class=\"headerlink\" title=\"实验 1 CPU vs PIM\"></a>实验 1 CPU vs PIM</h3><table>\n<thead>\n<tr>\n<th>实验</th>\n<th>CPU 线程</th>\n<th>DPU 个数</th>\n<th>Tasklet 数</th>\n<th>DMA Transfer size</th>\n<th>Page format</th>\n<th>SF</th>\n<th>operation</th>\n<th>selectivity</th>\n<th>attribute 个数</th>\n<th>物化策略</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>变量</td>\n<td>变量(CPU 未知)</td>\n<td>11</td>\n<td>没说</td>\n<td>变量</td>\n<td>变量</td>\n<td>scan-and-select</td>\n<td>50%</td>\n<td>1</td>\n<td>/</td>\n</tr>\n</tbody></table>\n<p align=\"center\"><img src=\"/img/pimDB  From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories/OZ2Nb6Cgpoo4zNxyeI1cMn5tnqf.png\"></p>\n\n<ul>\n<li>PIM 的成倍增加，性能几乎是成倍增加的；CPU 的成倍增加，在个数少时性能基本成倍增加，个数多时不然（shared nothing，减少竞争）</li>\n<li>数据量的增加对于 PIM 的影响几乎线性；而对 CPU 性能影响较大（减少数据移动，或者高速化并行化数据移动）</li>\n<li>PAX 的方式优于 NSM 的方式（列存储适合 OLAP 的必然）</li>\n</ul>\n<h3 id=\"实验-2-Impact-of-Invocation\"><a href=\"#实验-2-Impact-of-Invocation\" class=\"headerlink\" title=\"实验 2 Impact of Invocation\"></a>实验 2 Impact of Invocation</h3><table>\n<thead>\n<tr>\n<th>实验</th>\n<th>CPU 线程</th>\n<th>DPU 个数</th>\n<th>Tasklet 数</th>\n<th>DMA Transfer size</th>\n<th>Page format</th>\n<th>SF</th>\n<th>operation</th>\n<th>selectivity</th>\n<th>attribute 个数</th>\n<th>物化策略</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2</td>\n<td>变量</td>\n<td>变量(CPU 未知)</td>\n<td>11</td>\n<td>没说</td>\n<td>变量</td>\n<td>1</td>\n<td>scan-and-select</td>\n<td>50%</td>\n<td>1</td>\n<td>/</td>\n</tr>\n</tbody></table>\n<p align=\"center\"><img src=\"/img/pimDB  From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories/ZWIpb0lQooSTh7x2unococSTnK3.png\"></p>\n\n<ul>\n<li>何为 invocation cost？个人认为，比如执行 select A from B where A &gt; 30，传输 30 这个数据造成的开销就是</li>\n<li>合理划分任务与数据的 UPMEM 应用中 invocation cost 忽略不计；invocation cost 是存在的，开发者需要合理分配任务</li>\n<li>一个 DIMM 有两个 rank，每个 rank8 个 chip，每个 chip8 个 DPU，一个 DIMM 的并行计算能力优于 CPU</li>\n</ul>\n<h3 id=\"实验-3-Page-Format、WRAM-and-Data-Movement\"><a href=\"#实验-3-Page-Format、WRAM-and-Data-Movement\" class=\"headerlink\" title=\"实验 3 Page Format、WRAM and Data Movement\"></a>实验 3 Page Format、WRAM and Data Movement</h3><table>\n<thead>\n<tr>\n<th>实验</th>\n<th>CPU 线程</th>\n<th>DPU 个数</th>\n<th>Tasklet 数</th>\n<th>DMA Transfer size</th>\n<th>Page format</th>\n<th>SF</th>\n<th>operation</th>\n<th>selectivity</th>\n<th>attribute 个数</th>\n<th>物化策略</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>3</td>\n<td>32</td>\n<td>64</td>\n<td>11</td>\n<td>变量</td>\n<td>变量</td>\n<td>变量</td>\n<td>scan-and-select</td>\n<td>50%</td>\n<td>1</td>\n<td>/</td>\n</tr>\n</tbody></table>\n<p align=\"center\"><img src=\"/img/pimDB  From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories/Ad0jbOXjworOXnxJqFPcpxvznEe.png\"></p>\n\n<ul>\n<li><p>64B 一个 tuple</p>\n</li>\n<li><p>个人定性判断：DMA tansfer 所需的时钟还是多的，NSM 每次 DMA 传输的有效数据可供执行的指令非常少，整体来看 I/O 花费的时钟周期占比较大，因此 IPC 就低；而 PAX 每次 DMA 传输的有效数据非常多，一次 DMA 可以执行非常多的指令，整体来看用于计算的时钟周期占比较大。</p>\n</li>\n<li><p>SF 的指标仍然是表现的扩展性和稳定性良好</p>\n</li>\n<li><p>PAX 的方式需要更少的数据搬移，因此无论一次性传多少字节到 WRAM 中，数据远远足够，表现计算瓶颈</p>\n</li>\n<li><p>NSM 的方式需要更多的数据搬移，表现为 IO 瓶颈（一次搬运的数据很小，计算占比很小，需要等下一次 I/O）</p>\n<ul>\n<li>32B 有最小的读放大</li>\n<li>64B 是一整个 tuple</li>\n<li>128B 是两个 tuple</li>\n</ul>\n</li>\n<li><p>合理设计数据布局提高数据搬移效率，合理调整 DMA transfer 大小</p>\n</li>\n</ul>\n<h3 id=\"实验-4-Scalability-and-Constancy\"><a href=\"#实验-4-Scalability-and-Constancy\" class=\"headerlink\" title=\"实验 4 Scalability and Constancy\"></a>实验 4 Scalability and Constancy</h3><table>\n<thead>\n<tr>\n<th>实验</th>\n<th>CPU 线程</th>\n<th>DPU 个数</th>\n<th>Tasklet 数</th>\n<th>DMA Transfer size</th>\n<th>Page format</th>\n<th>SF</th>\n<th>operation</th>\n<th>selectivity</th>\n<th>attribute 个数</th>\n<th>物化策略</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>4</td>\n<td>没说(32)</td>\n<td>变量</td>\n<td>没说(11)</td>\n<td>没说</td>\n<td>变量</td>\n<td>变量</td>\n<td>scan-and-select</td>\n<td>50%</td>\n<td>没说(1)</td>\n<td>/</td>\n</tr>\n</tbody></table>\n<p align=\"center\"><img src=\"/img/pimDB  From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories/R1sWbADZVov8AvxtPWucMJoeneb.png\"></p>\n\n<ul>\n<li>将数据量和 DPU 个数按照同样的比率增加，表现不变（数据平均分布）</li>\n<li>将数据量恒定，将 DPU 个数按照一定的比率增加（2 倍），执行时间按照同样的比率减少</li>\n<li>可扩展性和稳定性很好</li>\n</ul>\n<h3 id=\"实验-5-Tasklet\"><a href=\"#实验-5-Tasklet\" class=\"headerlink\" title=\"实验 5 Tasklet\"></a>实验 5 Tasklet</h3><table>\n<thead>\n<tr>\n<th>实验</th>\n<th>CPU 线程</th>\n<th>DPU 个数</th>\n<th>Tasklet 数</th>\n<th>DMA Transfer size</th>\n<th>Page format</th>\n<th>SF</th>\n<th>operation</th>\n<th>selectivity</th>\n<th>attribute 个数</th>\n<th>物化策略</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5</td>\n<td>没说(32)</td>\n<td>64</td>\n<td>变量</td>\n<td>变量</td>\n<td>变量</td>\n<td>8</td>\n<td>scan-and-select</td>\n<td>50%</td>\n<td>没说(1)</td>\n<td>/</td>\n</tr>\n</tbody></table>\n<p align=\"center\"><img src=\"/img/pimDB  From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories/WIqwb6bxZoJk1SxlbBWcWucznwe.png\"></p>\n\n<ul>\n<li>PAX 模式由于计算瓶颈，因此 DMA transfer sizes 几乎没影响；DMA 对于 NSM 模式的影响与之前的 Page Format 类似，32B 相对最好，64B 最差，128B 次之</li>\n<li>多 tasklet 能够充分利用 I/O 时间 interleave，提高计算效率</li>\n<li>PAX 模式于 12tasklet 饱和，NSM32B 于 8，NSM64B 和 NSM128B 都于 6 饱和</li>\n<li>tasklets 个数要合理，太多可能过分占用 WRAM 空间</li>\n</ul>\n<h3 id=\"实验-6-Projection-and-Aggregation\"><a href=\"#实验-6-Projection-and-Aggregation\" class=\"headerlink\" title=\"实验 6 Projection and Aggregation\"></a>实验 6 Projection and Aggregation</h3><table>\n<thead>\n<tr>\n<th>实验</th>\n<th>CPU 线程</th>\n<th>DPU 个数</th>\n<th>Tasklet 数</th>\n<th>DMA Transfer size</th>\n<th>Page format</th>\n<th>SF</th>\n<th>operation</th>\n<th>selectivity</th>\n<th>attribute 个数</th>\n<th>物化策略</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>6</td>\n<td>没说(32)</td>\n<td>64</td>\n<td>11</td>\n<td>32B</td>\n<td>变量</td>\n<td>没说</td>\n<td>Aggregation</td>\n<td>50%</td>\n<td>变量</td>\n<td>/</td>\n</tr>\n</tbody></table>\n<p align=\"center\"><img src=\"/img/pimDB  From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories/GyP2b8Ii9oAe3OxDDmWcMlZ5nOO.png\"></p>\n\n<ul>\n<li>引入多个 attribute 并对每个 attribute 进行 aggregation</li>\n<li>文中说到 NSM 能够一个 DMA Transfer 传输所有 attribute，因此增加 attribute 不会造成太大影响（I/O bounded），相反能够让 IPC 提高</li>\n<li>PAX 每次 DMA 拿到部分 mini page，要想完成上述计算就需要多次 I/O，但是每次 I/O 带来的计算任务还是足够多的，因此仍然是 computation bounded，IPC 会随 attribute 的增加减少，但减少的不多；此外，由于引入多 attribute 的 aggregation 增加了计算任务，对于 computation bounded 的 PAX 来说，仍然会造成性能的影响（多一个 attribute 多执行 6~8ms）</li>\n<li>之前一直处于劣势的 NSM 反而在这种情况下的执行时间处于优势，这是 OLTP 和 OLAP 两种应用适用不同 page format 的必然，因此需要根据应用来设计程序，Trade off between computation and I/O</li>\n</ul>\n<h3 id=\"实验-7-Materialization\"><a href=\"#实验-7-Materialization\" class=\"headerlink\" title=\"实验 7 Materialization\"></a>实验 7 Materialization</h3><table>\n<thead>\n<tr>\n<th>实验</th>\n<th>CPU 线程</th>\n<th>DPU 个数</th>\n<th>Tasklet 数</th>\n<th>DMA Transfer size</th>\n<th>Page format</th>\n<th>SF</th>\n<th>operation</th>\n<th>selectivity</th>\n<th>attribute 个数</th>\n<th>物化策略</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>7</td>\n<td>没说(32)</td>\n<td>64</td>\n<td>11</td>\n<td>64B</td>\n<td>变量</td>\n<td>1</td>\n<td>scan-and-select</td>\n<td>变量(DPU 变时 50%)</td>\n<td></td>\n<td>变量</td>\n</tr>\n</tbody></table>\n<p align=\"center\"><img src=\"/img/pimDB  From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories/PvJFbNAHIokPVuxVzZkcq91tndo.png\"></p>\n\n<ul>\n<li>Materialization，个人认为其意思是将一些复杂查询的结果持久化到硬盘中以便下次使用</li>\n<li>增加 selectivity 会增加物化结果的大小（多少）</li>\n<li>对于 BitVector，其只记载 tuple 的 location 而不记载真正的 tuple，在 WRAM 中缓存（不占内存）</li>\n<li>对于 Full Materialization，需要记录所有 attribute，且在 MRAM 中缓存（占内存）</li>\n<li>对 NSM，BitVector 方式几乎没有影响（I/O bounded），Full Materialization 方式会需要写入 MRAM，会有轻微影响（64B 刚好是一个 tuple）</li>\n<li>对 PAX，BitVector 方式有轻微影响（computation bounded），Full Materialization 方式有着极大的影响，因为需要所有 attribute，而 PAX 只会缓存部分 mini page，因此需要 I/O 去读其他的 attribute</li>\n<li>Scalability 和之前一样</li>\n</ul>\n<h3 id=\"实验-8-Kernel-deployment-and-invocation\"><a href=\"#实验-8-Kernel-deployment-and-invocation\" class=\"headerlink\" title=\"实验 8 Kernel deployment and invocation\"></a>实验 8 Kernel deployment and invocation</h3><p align=\"center\"><img src=\"/img/pimDB  From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories/J1Mwba0KtoaxpfxhZwHcmvRVnng.png\"></p>\n\n<ul>\n<li>大的通用性高的 kernel（程序）vs 小的专用性高的 kernel（程序）</li>\n<li>大的需要传额外的参数以判断操作类型，小的可能需要切换不同的 kernel 完成操作</li>\n<li>文章认为 24KB 的 IRAM 足够放置大的通用性高的 kernel，传参数的开销小于传 kernel 的开销，但是如果应用条件允许的话，传 kernel 也是可以接受的选择</li>\n</ul>\n<h2 id=\"Lessons\"><a href=\"#Lessons\" class=\"headerlink\" title=\"Lessons\"></a>Lessons</h2><ul>\n<li>How will PIM-capable memories be embedded into the memory hierarchy?</li>\n<li>Will they potentially co-exist with passive memories building a multi-tier main-memories or is it realistic to assume PIM-only memory?</li>\n<li>How will PIM-memories scale and what interconnect will they have, especially with view of novel cachecoherent interconnects such as CXL and protocols like CXL.mem?</li>\n</ul>\n<h2 id=\"Contribution\"><a href=\"#Contribution\" class=\"headerlink\" title=\"Contribution\"></a>Contribution</h2><ul>\n<li><strong>We investigate the impact of different page layouts (NSM, PAX)</strong> on PIM processing and scalability on a real system. We observe the necessity for custom PIM page layouts.</li>\n<li><strong>We investigate the scale and the different levels of PIM-parallelism</strong>. Our exploration offers insights into the compute/bandwidth tradeoffs in PIM-processing and calls for compute/transfer interleaving primitives in PIM settings.</li>\n<li><strong>We investigate the effect of the in-situ/PIM memory hierarchy and configurable PIM data transfers</strong> (as opposed to cachelinesized transfers) on assumptions in cache-aware processing and data layouts.</li>\n<li><strong>We investigate PIM allocation strategies</strong>, as PIM mandates data/ operation co-placement and partitioning. In this context, we evaluate the kernel deployment and the PIM invocation overhead.</li>\n</ul>\n","feature":true,"text":"研究内存数据库的处理方法，探讨布局、层次和迁移对性能的影响，结果提高计算效率，同时研究页面布局、内存层次和迁移对性能的影响。...","permalink":"/post/pimDB  From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"工程技术","slug":"工程技术","count":3,"path":"api/categories/工程技术.json"}],"tags":[{"name":"页面布局","slug":"页面布局","count":1,"path":"api/tags/页面布局.json"},{"name":"内存层次结构","slug":"内存层次结构","count":1,"path":"api/tags/内存层次结构.json"},{"name":"数据迁移","slug":"数据迁移","count":1,"path":"api/tags/数据迁移.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#pimDB-From-Main-Memory-DBMS-to-Processing-In-Memory-DBMS-Engines-on-Intelligent-Memories\"><span class=\"toc-text\">pimDB: From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Motivation\"><span class=\"toc-text\">Motivation</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Design\"><span class=\"toc-text\">Design</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Evaluation\"><span class=\"toc-text\">Evaluation</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TPC-H\"><span class=\"toc-text\">TPC-H</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%AA%8C-1-CPU-vs-PIM\"><span class=\"toc-text\">实验 1 CPU vs PIM</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%AA%8C-2-Impact-of-Invocation\"><span class=\"toc-text\">实验 2 Impact of Invocation</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%AA%8C-3-Page-Format%E3%80%81WRAM-and-Data-Movement\"><span class=\"toc-text\">实验 3 Page Format、WRAM and Data Movement</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%AA%8C-4-Scalability-and-Constancy\"><span class=\"toc-text\">实验 4 Scalability and Constancy</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%AA%8C-5-Tasklet\"><span class=\"toc-text\">实验 5 Tasklet</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%AA%8C-6-Projection-and-Aggregation\"><span class=\"toc-text\">实验 6 Projection and Aggregation</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%AA%8C-7-Materialization\"><span class=\"toc-text\">实验 7 Materialization</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%AA%8C-8-Kernel-deployment-and-invocation\"><span class=\"toc-text\">实验 8 Kernel deployment and invocation</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Lessons\"><span class=\"toc-text\">Lessons</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Contribution\"><span class=\"toc-text\">Contribution</span></a></li></ol></li></ol>","author":{"name":"Lucas Zhang","slug":"blog-author","avatar":"/img/refrain.jpg","link":"/","description":"<p>夜阑卧听风吹雨</p>Over The Hill.","socials":{"github":"https://github.com/FailureJack","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/13432006?spm_id_from=333.337.0.0"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/failurer"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/failurejack"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/failurer/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Linux:远程服务器基本配置","uid":"e11309200b51d3994997c0a4fbb9bd23","slug":"Linux远程服务器基本配置","date":"2023-12-27T12:02:14.000Z","updated":"2023-12-29T04:09:25.592Z","comments":false,"path":"api/articles/Linux远程服务器基本配置.json","keywords":null,"cover":"/cover/Linux远程服务器基本配置.png","text":"这篇文章详细介绍了如何在本地计算机和远程Linux服务器之间进行高效稳定的文件传输，提供了多种方法，如VPN跳板机访问内网服务器、ssh免密登录和文件传输等。同时，文章还解释了如何使用VSCode进行拖拽式文件传输，并建议使用ssh连接的服务器端开发。此外，文章还涉及了其他网络问题的解决方案。...","permalink":"/post/Linux远程服务器基本配置","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"工程技术","slug":"工程技术","count":3,"path":"api/categories/工程技术.json"}],"tags":[{"name":"远程服务器","slug":"远程服务器","count":1,"path":"api/tags/远程服务器.json"},{"name":"Markdown","slug":"Markdown","count":1,"path":"api/tags/Markdown.json"},{"name":"文件传输","slug":"文件传输","count":1,"path":"api/tags/文件传输.json"}],"author":{"name":"Lucas Zhang","slug":"blog-author","avatar":"/img/refrain.jpg","link":"/","description":"<p>夜阑卧听风吹雨</p>Over The Hill.","socials":{"github":"https://github.com/FailureJack","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/13432006?spm_id_from=333.337.0.0"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/failurer"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/failurejack"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/failurer/"}}}},"feature":true},"next_post":{"title":"正向代理","uid":"c1ec9505ed5e2baed7a2c980a22bec5a","slug":"正向代理","date":"2023-11-25T11:13:30.102Z","updated":"2023-12-29T04:09:25.594Z","comments":true,"path":"api/articles/正向代理.json","keywords":null,"cover":"/cover/正向代理.png","text":"以校园网访问谷歌为由，介绍如何配置正向代理服务器，涉及Clash、shadowsocks等多种代理方式，并补充无需代理的翻墙方式...","permalink":"/post/正向代理","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[{"name":"学术科研","slug":"学术科研","count":2,"path":"api/categories/学术科研.json"}],"tags":[{"name":"代理服务器","slug":"代理服务器","count":1,"path":"api/tags/代理服务器.json"},{"name":"流量转发","slug":"流量转发","count":1,"path":"api/tags/流量转发.json"},{"name":"正向代理","slug":"正向代理","count":1,"path":"api/tags/正向代理.json"}],"author":{"name":"Lucas Zhang","slug":"blog-author","avatar":"/img/refrain.jpg","link":"/","description":"<p>夜阑卧听风吹雨</p>Over The Hill.","socials":{"github":"https://github.com/FailureJack","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/13432006?spm_id_from=333.337.0.0"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/failurer"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/failurejack"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/failurer/"}}}}}}