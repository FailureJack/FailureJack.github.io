{"title":"gem5 基本部署","uid":"85dc162ae8f3c2b9bfa480ee7525dc8d","slug":"gem5 基本部署","date":"2023-12-29T07:09:04.000Z","updated":"2023-12-29T07:09:04.924Z","comments":true,"path":"api/articles/gem5 基本部署.json","keywords":null,"cover":"/cover/gem5 基本部署.png","content":"<h1 id=\"gem5-基本部署\"><a href=\"#gem5-基本部署\" class=\"headerlink\" title=\"gem5 基本部署\"></a>gem5 基本部署</h1><p>本文档介绍如何在 Ubuntu 上部署 gem5，主要是系统调用和全系统模拟两种模式。<a href=\"https://arxiv.org/abs/2007.03152\">gem5 的官方文章</a>中介绍了这两种模式的异同，具体可以看下图：</p>\n<p align=\"center\"><img src=\"/img/gem5 基本部署/EEO1bSFAPoVsOKxiizVcEntvnhg.png\"></p>\n\n<p>系统调用模式（SE，Syscall Emulation）将模拟的指令转化为系统调用，全系统模式（FS，Full System）模拟硬件并在模拟的硬件上建立客户操作系统，能够提供更加底层精细的统计，同时性能会更差。但因其 FS 模式更加全面，因此 FS 模式更常使用，是重点。</p>\n<p>下面给出推荐的环境配置：</p>\n<table>\n<thead>\n<tr>\n<th><strong>环境</strong></th>\n<th><strong>要求</strong></th>\n<th><strong>原因</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ubuntu</td>\n<td>版本 &gt;=18</td>\n<td>按照官网建议的来，gem5 的版本和 Ubuntu 的版本需要搭配，否则难以编译 gem5；本人使用的是 Ubuntu20.04LTS+gem5 22.0。</td>\n</tr>\n<tr>\n<td>gem5</td>\n<td>版本 &gt;=20.0</td>\n<td></td>\n</tr>\n<tr>\n<td>Host 机</td>\n<td>内存 &gt;=8GB</td>\n<td>编译 gem5 的时候很占内存，内存越大越好</td>\n</tr>\n<tr>\n<td>Host 机</td>\n<td>硬盘 &gt;=100GB</td>\n<td>gem5 本身、全系统的 img 都不小，还可能创建 swap 分区</td>\n</tr>\n</tbody></table>\n<h2 id=\"gem5-SE-模式搭建\"><a href=\"#gem5-SE-模式搭建\" class=\"headerlink\" title=\"gem5 SE 模式搭建\"></a>gem5 SE 模式搭建</h2><p>此步骤建议按照<a href=\"https://www.gem5.org/documentation/learning_gem5/part1/building/\">官方文档</a>一步一步走，最后进行 Hello world 测试。也可参考<a href=\"https://zhuanlan.zhihu.com/p/336017753\">他人的博客</a>。</p>\n<h3 id=\"依赖安装\"><a href=\"#依赖安装\" class=\"headerlink\" title=\"依赖安装\"></a>依赖安装</h3><p>注意：整个安装过程可能需要等待较长时间。切记不要换源，阿里源、清华源均不可，否则会出现难以琢磨的未满足的依赖关系的问题。</p>\n<p>执行下面的命令安装依赖：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">apt</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">install</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">build-essential</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">git</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">m4</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">scons</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">zlib1g</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">zlib1g-dev</span><span style=\"color: #BABED8\"> \\</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C3E88D\">libprotobuf-dev</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">protobuf-compiler</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">libprotoc-dev</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">libgoogle-perftools-dev</span><span style=\"color: #BABED8\"> \\</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #C3E88D\">python3-dev</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">python-is-python3</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">libboost-all-dev</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">pkg-config</span></span></code></pre></div><h3 id=\"gem5-源码克隆\"><a href=\"#gem5-源码克隆\" class=\"headerlink\" title=\"gem5 源码克隆\"></a>gem5 源码克隆</h3><p>克隆 gem5 到目录 GEM5 中，要保证空间充足。</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 可以访问谷歌使用下面的克隆，应该是最新版本</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">git</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">clone</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">https://gem5.googlesource.com/public/gem5</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 可以访问github使用下面的克隆，应该是最新版本</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">git</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">clone</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">https://github.com/gem5/gem5.git</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 不能访问上面两种，克隆我本人的公开仓库，版本是22.0</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">git</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">clone</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">https://gitee.com/failurejack/gem5.git</span></span></code></pre></div><h3 id=\"编译源码\"><a href=\"#编译源码\" class=\"headerlink\" title=\"编译源码\"></a>编译源码</h3><p>terminal 进入刚刚克隆的 gem5 目录，执行下面命令进行编译：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">python3</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">`</span><span style=\"color: #82AAFF\">which</span><span style=\"color: #C3E88D\"> scons</span><span style=\"color: #89DDFF\">`</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">build/ARM/gem5.opt</span><span style=\"color: #BABED8\"> </span><span style=\"color: #BABED8\">**</span><span style=\"color: #C3E88D\">-j9</span><span style=\"color: #BABED8\">**</span></span></code></pre></div><p>解释一下上面的命令：</p>\n<ul>\n<li><code>ARM</code> 代表编译的模拟器的指令集是 arm 指令集，如果要编译 x86 指令集，只需要将 ARM 换成 X86，注意大写。</li>\n<li><code>-j9</code> 代表编译使用的 CPU 数量为 9，具体的原理我也不太清楚，推荐编译使用的线程数是 CPU 核心数 +1，比如我的 CPU 是 4 核，那就写为 <code>-j5</code>，如果内存不够用，适当调小。</li>\n</ul>\n<h3 id=\"检验是否成功\"><a href=\"#检验是否成功\" class=\"headerlink\" title=\"检验是否成功\"></a>检验是否成功</h3><p>在 gem5 目录中使用 se.py 中的 hello world 测试，控制台打印出 <code>Hello world!</code> 字样证明编译成功：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">build/**ARM**/gem5.opt</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">configs/example/se.py</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-c</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">tests/test-progs/hello/bin/</span><span style=\"color: #BABED8\">**</span><span style=\"color: #C3E88D\">arm</span><span style=\"color: #BABED8\">**</span><span style=\"color: #C3E88D\">/linux/hello</span></span></code></pre></div><h3 id=\"问题：Python-报错\"><a href=\"#问题：Python-报错\" class=\"headerlink\" title=\"问题：Python 报错\"></a>问题：Python 报错</h3><p>编译 gem5 的时候可能出现以下报错：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Embedded python library 3.6 or newer required<br>Checking for linker -Wl,–as-needed support… yes<br>Checking for compiler -Wno-free-nonheap-object support… yes<br>Checking for compiler -gz support… yes<br>Checking for linker -gz support… yes<br>Info: Using Python config: python-config<br>Checking for C header file Python.h… yes<br>Checking Python version… 2.7.18<br>Error: Embedded python library 3.6 or newer required, found 2.7.18.</p></blockquote>\n<p>这里出现问题的可能一方面是版本问题；另一方面可能是 Python 的默认解释器还是 Python2。</p>\n<p>版本问题其实就是 Python 和 SCons 的版本不匹配，按照官方建议的 gem5 版本和 Ubuntu 版本搭配，使用 apt-get 安装的 Python 和 SCons 的版本是匹配的。反过来说不匹配可以在输出中检查并更新（源码编译，添加源都可以）。</p>\n<p>如果本身版本是匹配的，但是仍然编译报错，那就可能是</p>\n<p>这个问题在我初次编译 gem5 的时候遇到过，尽管 Python 的版本都是对的，还是报错，那可能是 Python 的默认解释器还是 Python2，需要手动设置软连接：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #82AAFF\">cd</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/usr/bin/</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">rm</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">python</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">ln</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-s</span><span style=\"color: #BABED8\">  </span><span style=\"color: #C3E88D\">python3</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">python</span></span></code></pre></div><p><strong>值得注意的是</strong>，上述问题在本人第一次编译 gem5 的时候出现过，那时使用的就是 python 的命令，后来使用 python3 的命令编译后，在新的环境中也没有出现过问题。</p>\n<h3 id=\"问题：内存不足\"><a href=\"#问题：内存不足\" class=\"headerlink\" title=\"问题：内存不足\"></a>问题：内存不足</h3><p>较新版本的 gem5 编译非常占用内存空间，老一些的版本，如大约 2017 年的版本编译需要的内存开销明显较小。最新的 20.0+ 版本需要至少 8GB 以上的内存。</p>\n<p>X86 和 ARM 两个指令集的 gem5 我都编译测试过，在 Ubuntu2004LTS 桌面版中，X86 的编译明显比 ARM 更快而且更节省内存，我在编译 X86 时内存够用，而在编译 ARM 内存不够（8GB 内存），调小 CPU 数也不够，就需要<a href=\"https://blog.csdn.net/u011897411/article/details/89742008\">创建 SWAP 分区</a>。创建分区时可能会遇到各种各样的错误 ，可以自行百度解决（这个网上资源非常多）。可以使用下面的命令：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 从分区/dev/zero向目录/swapfile写入bs*count个字节的空间</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">dd</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">if=/dev/zero</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">of=/swapfile</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">bs=</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #C3E88D\">G</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">count=</span><span style=\"color: #F78C6C\">6</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 把刚才空间格式化成swap格式</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">mkswap</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/swapfile</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 挂载分区  </span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">swapon</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/swapfile</span></span></code></pre></div><p>如果上面的第一条命令报错：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>dd: failed to open ‘/swapfile’: Text file busy</p></blockquote>\n<p>则执行 <code>sudo swapoff -a</code> 即可正常运行。</p>\n<p>编译结束后如果硬盘吃紧可以删除该 swap 分区：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 卸载分区</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">swapoff</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/swapfile</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#删除swap文件，减少空间占用</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">rm</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/swapfile</span></span></code></pre></div><h2 id=\"gem5-FS-模式搭建\"><a href=\"#gem5-FS-模式搭建\" class=\"headerlink\" title=\"gem5 FS 模式搭建\"></a>gem5 FS 模式搭建</h2><p>gem5 的 FS 模式需要完全模拟操作系统，因此需要许多组件，基本的组件如下：</p>\n<table>\n<thead>\n<tr>\n<th>需要组件</th>\n<th>作用</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>kernel</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>img</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>bootloader</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>device tree blob</td>\n<td></td>\n<td>在 20.0+ 的 gem5 版本中，默认能生成，不需要提供，除非有特殊需求</td>\n</tr>\n</tbody></table>\n<h3 id=\"预构建组件\"><a href=\"#预构建组件\" class=\"headerlink\" title=\"预构建组件\"></a>预构建组件</h3><p>对于搭建 ARM 体系的 gem5 全系统模式，并不必要自行创建 kernel 和 disk，直接下载官方预编译的组件即可：</p>\n<p><a href=\"https://www.gem5.org/documentation/general_docs/fullsystem/guest_binaries\">gem5: Guest Binaries</a></p>\n<p>后缀中带有 img 的文件一般就是 disk 镜像，其他的则是预编译好的 kernel 和 bootloader 文件（其中有的包含 img）。</p>\n<p align=\"center\"><img src=\"/img/gem5 基本部署/SHeabMBbXowsJVxYiAAc2unwnVg.png\"></p>\n\n<p>目前官网上所有预编译文件下载连接如下：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># kernel文件（可能包含img）</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">wget</span><span style=\"color: #BABED8\"> [http://dist.gem5.org/dist/v22-0/arm/aarch-system-20220707.tar.bz2]</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">http://dist.gem5.org/dist/v22-0/arm/aarch-system-20220707.tar.bz2</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">wget</span><span style=\"color: #BABED8\"> [http://dist.gem5.org/dist/current/arm/aarch-system-20170616.tar.xz]</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">http://dist.gem5.org/dist/current/arm/aarch-system-20170616.tar.xz</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">wget</span><span style=\"color: #BABED8\"> [http://dist.gem5.org/dist/current/arm/aarch-system-20180409.tar.xz]</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">http://dist.gem5.org/dist/current/arm/aarch-system-20180409.tar.xz</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">wget</span><span style=\"color: #BABED8\"> [http://dist.gem5.org/dist/current/arm/arm-system-dacapo-2011-08.tgz]</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">http://dist.gem5.org/dist/current/arm/arm-system-dacapo-2011-08.tgz</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">wget</span><span style=\"color: #BABED8\"> [http://dist.gem5.org/dist/current/arm/arm-system.tar.bz2]</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">http://dist.gem5.org/dist/current/arm/arm-system.tar.bz2</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">wget</span><span style=\"color: #BABED8\"> [http://dist.gem5.org/dist/current/arm/arm64-system-02-2014.tgz]</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">http://dist.gem5.org/dist/current/arm/arm64-system-02-2014.tgz</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">wget</span><span style=\"color: #BABED8\"> [http://dist.gem5.org/dist/current/arm/kitkat-overlay.tar.bz2]</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">http://dist.gem5.org/dist/current/arm/kitkat-overlay.tar.bz2</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">wget</span><span style=\"color: #BABED8\"> [http://dist.gem5.org/dist/current/arm/linux-arm-arch.tar.bz2]</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">http://dist.gem5.org/dist/current/arm/linux-arm-arch.tar.bz2</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">wget</span><span style=\"color: #BABED8\"> [http://dist.gem5.org/dist/current/arm/vmlinux-emm-pcie-3.3.tar.bz2]</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">http://dist.gem5.org/dist/current/arm/vmlinux-emm-pcie-3.3.tar.bz2</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">wget</span><span style=\"color: #BABED8\"> [http://dist.gem5.org/dist/current/arm/vmlinux.arm.smp.fb.3.2.tar.gz]</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">http://dist.gem5.org/dist/current/arm/vmlinux.arm.smp.fb.3.2.tar.gz</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># img文件</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">wget</span><span style=\"color: #BABED8\"> [http://dist.gem5.org/dist/v22-0/arm/disks/ubuntu-18.04-arm64-docker.img.bz2]</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">http://dist.gem5.org/dist/v22-0/arm/disks/ubuntu-18.04-arm64-docker.img.bz2</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">wget</span><span style=\"color: #BABED8\"> [http://dist.gem5.org/dist/v22-0/arm/disks/aarch32-ubuntu-natty-headless.img.bz2]</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">http://dist.gem5.org/dist/v22-0/arm/disks/aarch32-ubuntu-natty-headless.img.bz2</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">wget</span><span style=\"color: #BABED8\"> [http://dist.gem5.org/dist/current/arm/disks/aarch64-ubuntu-trusty-headless.img.bz2]</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">http://dist.gem5.org/dist/current/arm/disks/aarch64-ubuntu-trusty-headless.img.bz2</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">wget</span><span style=\"color: #BABED8\"> [http://dist.gem5.org/dist/current/arm/disks/linaro-minimal-aarch64.img.bz2]</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">http://dist.gem5.org/dist/current/arm/disks/linaro-minimal-aarch64.img.bz2</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">wget</span><span style=\"color: #BABED8\"> [http://dist.gem5.org/dist/current/arm/disks/linux-aarch32-ael.img.bz2]</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">http://dist.gem5.org/dist/current/arm/disks/linux-aarch32-ael.img.bz2</span><span style=\"color: #89DDFF\">)</span></span></code></pre></div><p>值得一提的是最新的预编译文件中并不包含 dtb 文件，原因是官方不建议手动指定因为 gem5 20.0+ 版本能够自动生成，当然这个生成有一定的约束（VExpress_EMM 类型无法生成）。</p>\n<p>下载最新的 kernel 和 bootloader 文件使用如下命令：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 下载至当前目录（fullsystem）</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">wget</span><span style=\"color: #BABED8\"> [http://dist.gem5.org/dist/v22-0/arm/aarch-system-20220707.tar.bz2]</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">http://dist.gem5.org/dist/v22-0/arm/aarch-system-20220707.tar.bz2</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 解压至当前目录（包含两个文件夹binaries和disks）</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">tar</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">jxvf</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">aarch-system-20220707.tar.bz2</span></span></code></pre></div><p>下载最新的 disk 镜像使用如下命令：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 下载至当前目录（fullsystem）</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">wget</span><span style=\"color: #BABED8\"> [http://dist.gem5.org/dist/v22-0/arm/disks/ubuntu-18.04-arm64-docker.img.bz2]</span><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">http://dist.gem5.org/dist/v22-0/arm/disks/ubuntu-18.04-arm64-docker.img.bz2</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 解压至当前目录**并会删除原压缩文件**</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">bzip2</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-d</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">ubuntu-18.04-arm64-docker.img.bz2</span></span></code></pre></div><p>值得注意的是选择镜像时，要考虑目标应用对操作系统的要求，在该下载页面，有许多 disk 中 Ubuntu 的版本是 14，如 <strong>aarch64-ubuntu-trusty-headless.img.bz2</strong>，这个我目前只能在进入了全系统模拟后从 terminal 中的输出看到。</p>\n<h3 id=\"自构建组件\"><a href=\"#自构建组件\" class=\"headerlink\" title=\"自构建组件\"></a>自构建组件</h3><h3 id=\"fs-py-常用参数\"><a href=\"#fs-py-常用参数\" class=\"headerlink\" title=\"fs.py 常用参数\"></a>fs.py 常用参数</h3><p><strong>详细参见文件 configs/common/Option.py</strong></p>\n<h4 id=\"Debug-flag\"><a href=\"#Debug-flag\" class=\"headerlink\" title=\"Debug-flag\"></a>Debug-flag</h4><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">$GEM5</span><span style=\"color: #89DDFF\">/</span><span style=\"color: #BABED8\">build</span><span style=\"color: #89DDFF\">/</span><span style=\"color: #BABED8\">ARM</span><span style=\"color: #676E95; font-style: italic\">/**gem5.opt** **--debug-flags=PIM** $GEM5/configs/example/**fs.py** ...</span></span></code></pre></div><p><a href=\"https://blog.csdn.net/qq_43381135/article/details/104433150\">https://blog.csdn.net/qq_43381135/article/details/104433150</a></p>\n<h3 id=\"简单全系统测试\"><a href=\"#简单全系统测试\" class=\"headerlink\" title=\"简单全系统测试\"></a>简单全系统测试</h3><p>建议<a href=\"https://www.cnblogs.com/carle-09/p/12582209.html\">编写简单的 sh 脚本</a>进行全系统运行，每次 terminal 打比较麻烦。</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 进入GEM5目录</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">vim</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">fs.sh</span></span></code></pre></div><p>输入 <code>i</code> 进入 INSERT 模式，粘贴下列命令：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#!/bin/bash</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">GEM5</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #C3E88D\">~/GEM5/gem5</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">FS</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #C3E88D\">~/GEM5/fullsystem</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">$GEM5/build/ARM/gem5.opt $GEM5/configs/example/fs.py --kernel $FS/binaries/vmlinux.arm64 --disk $FS/img/ubuntu-18.04-arm64-docker.img --bootloader $FS/binaries/boot.arm64 --mem-size=4096MB --num-cpus=4</span></span></code></pre></div><p>按 <code>ESC</code> 退出 INSERT 模式，输入 <code>:wq</code> 写入磁盘保存</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 继续在当前目录下赋予执行权限</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">chmod</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">+x</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">fs.sh</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 运行全系统模式</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">./fs.sh</span></span></code></pre></div><p>与此同时，新建一个 terminal 来连接本地全系统的控制台</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">telnet</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">localhost</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">3456</span></span></code></pre></div><p>如果机器允许使用 <code>make install</code> 命令安装软件，则进入到 gem5 的目录下输入如下命令：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 进入gem5目录</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">cd</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">~/GEM/gem5/util/term</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">make</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">make</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">install</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 使用m5term连接</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">m5term</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">localhost</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">3456</span></span></code></pre></div><h4 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h4><p>我看网上许多教程都使用了环境变量 M5_PATH，以及官网也提了一下，应该是方便书写 shell 命令。指定 M5_PATH 的路径，系统会自动从此路径寻找相应的内核和镜像文件（从 binaries 找 kenerl，从 disk 找 img）。但是我个人觉得没有必要，写 sh 脚本时将 kernel 和 img 的绝对路径设置好就可以直接运行，也更加灵活。下面的环境变量方法仅供参考（没有试过）：</p>\n<p>打开本人主机下的 <code>.bashrc</code> 文件，我的主机名叫 zkyh，不同的机器名称不一样</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">vi</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/home/zkyh/.bashrc</span></span></code></pre></div><p>在最后一行添加 fullsystem 的路径：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">export</span><span style=\"color: #BABED8\"> M5_PATH</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #BABED8\">$M5_PATH</span><span style=\"color: #C3E88D\">:/usr/fs-image</span></span></code></pre></div><p>使环境变量生效：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #82AAFF\">source</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/home/zkyh/.bashrc</span></span></code></pre></div><h3 id=\"对-img-进行基本设置\"><a href=\"#对-img-进行基本设置\" class=\"headerlink\" title=\"对 img 进行基本设置\"></a>对 img 进行基本设置</h3><h4 id=\"挂-卸载镜像\"><a href=\"#挂-卸载镜像\" class=\"headerlink\" title=\"挂/卸载镜像\"></a>挂/卸载镜像</h4><p>更改 img 中的文件需要使用 <code>mount</code> 命令使得 Host 机以访问文件夹的方式访问 img 系统文件。</p>\n<p>GEM5 目录下创建脚本 mount.sh：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#!/bin/bash</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">GEM5</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #C3E88D\">~/GEM5/gem5</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">MNT</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #C3E88D\">~/GEM5/mnt</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">FS</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #C3E88D\">~/GEM5/fullsystem</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> $GEM5</span><span style=\"color: #C3E88D\">/util/gem5img.py</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">mount</span><span style=\"color: #BABED8\"> $FS</span><span style=\"color: #C3E88D\">/img/ubuntu-18.04-arm64-docker.img</span><span style=\"color: #BABED8\"> $MNT</span></span></code></pre></div><p>在进入全系统模式之前需要将镜像 <code>umount</code>，同目录下建立脚本 umount.sh：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#!/bin/bash</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">MNT</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #C3E88D\">~/GEM5/mnt</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">umount</span><span style=\"color: #BABED8\"> $MNT</span></span></code></pre></div><p>执行 umount.sh 脚本，如果出现 <code>umount target is busy</code> 的问题，证明有进程占用了该分区，需要杀掉该进程。</p>\n<p>目前杀掉进程主要有<a href=\"https://www.laobuluo.com/8258.html\">两种方法</a>，分别是使用 <code>lsof</code> 命令和 <code>fuser</code> 命令（虚拟机等很简单，重启就行），然而 <code>lsof</code> 命令我并没有在服务器上使用成功，有复杂的权限问题，而 <code>fuser</code> 命令（如果没有该命令需要安装包 <code>psmisc</code>）使用成功：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">fuser</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-km</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/home/zkyh/GEM5/mnt</span></span></code></pre></div><h4 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h4><p>扩容有时非常必要，对于已经建立好的 img，因为种种原因空间不够用，需要进行扩容。</p>\n<p>本节主要是对于镜像 <strong>ubuntu-18.04-arm64-docker.img</strong> 扩容，因其本身不装有任何软件，预留的空间又较小（1.8G），简单编译几个 workload 就占满了，扩容比较必要。</p>\n<h5 id=\"图形化界面方式\"><a href=\"#图形化界面方式\" class=\"headerlink\" title=\"图形化界面方式\"></a>图形化界面方式</h5><p>先安装 gparted 工具：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 先要安装分区软件（磁盘管理）</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">apt-get</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">install</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">gparted</span></span></code></pre></div><p>开始扩展：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 向当前目录下的img写入1GB的空白空间</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">dd</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">if=/dev/zero</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">bs=</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #C3E88D\">M</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">count=</span><span style=\"color: #F78C6C\">1024</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">./ubuntu-18.04-arm64-docker.img</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 挂载img到分区</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">udisksctl</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">loop-setup</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-f</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">./ubuntu-18.04-arm64-docker.img</span></span></code></pre></div><p>注意，<code>/dev/zero</code> 文件是一个特殊的字符设备文件，当我们使用或者读取它的时候，它会提供无限连续不断的空数据流（特殊的数据格式流）</p>\n<p>挂载结果如下，知道挂载到了分区/dev/loop14</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Mapped file ./ubuntu-18.04-arm64-docker.img as /dev/loop14.</p></blockquote>\n<p>使用 gparted 管理该分区，并最后卸载分区：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 用gparted把空闲空间加到image的sda1上，在图形化界面使用resize拉满即可</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">gparted</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/dev/loop14</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 卸载该分区</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">udisksctl</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">loop-delete</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-b</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/dev/loop14</span></span></code></pre></div><p>Gparted 的图形化界面如下所示：</p>\n<h5 id=\"命令行方式\"><a href=\"#命令行方式\" class=\"headerlink\" title=\"命令行方式\"></a>命令行方式</h5><p>命令行的方式与图形化有些许不同，需要用到工具 <code>parted</code> 和 <code>resize2fs</code>（一般系统都默认安装）。</p>\n<p>首先跟图形化安装类似，追加空白空间；其次对 <code>img</code> 使用 <code>parted</code> 工具管理：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 向当前目录下的img写入1GB的空白空间</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">dd</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">if=/dev/zero</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">bs=</span><span style=\"color: #F78C6C\">1</span><span style=\"color: #C3E88D\">M</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">count=</span><span style=\"color: #F78C6C\">1024</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">&gt;&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">./ubuntu-18.04-arm64-docker.img</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 使用parted工具管理img</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">parted</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">./ubuntu-18.04-arm64-docker.img</span></span></code></pre></div><p>进入 <code>parted</code> 命令界面，进行分区表的扩容：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 打印一下img的分区情况</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">parted</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> print</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 控制台输出如下所示：</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># GNU Parted 3.3</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># Using /home/zkyh/GEM5/fullsystem/img/ubuntu-18.04-arm64-docker.img</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># Welcome to GNU Parted! Type 'help' to view a list of commands.</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># (parted) print                                                            </span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># Model:  (file)</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># Disk /home/zkyh/GEM5/fullsystem/img/ubuntu-18.04-arm64-docker.img: 5221MB</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># Sector size (logical/physical): 512B/512B</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># Partition Table: msdos</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># Disk Flags: </span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># </span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># Number  Start   End     Size    Type     File system  Flags</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#  1      65.5kB  5221MB  5221MB  primary  ext4</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 对1号分区重新分配空间，使得其占满未使用的空间</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">parted</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> resizepart 1 100%</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 重新打印一下img的分区情况确认</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">parted</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> print</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 退出</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">(</span><span style=\"color: #FFCB6B\">parted</span><span style=\"color: #89DDFF\">)</span><span style=\"color: #BABED8\"> quit</span></span></code></pre></div><p>再进入目录 <code>~/GEM5</code> 下，进行扩容：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 调用之前写好的脚本将img挂载</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">mount.sh</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 查看本机分区情况，找到img被挂载的分区</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">df</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-h</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 控制台打印如下：</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># Filesystem      Size  Used Avail Use% Mounted on</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># udev            184G     0  184G   0% /dev</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># tmpfs            37G  3.0M   37G   1% /run</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># ...</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># /dev/loop17     4.8G  1.5G  3.1G  32% /home/zkyh/GEM5/mnt</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 对该/dev/loop17分区进行扩容</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">resize2fs</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/dev/loop17</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 重新查看分区情况以确认</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">df</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-h</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 调用之前写好的脚本卸载img，结束扩容</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">umount.sh</span></span></code></pre></div><h4 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h4><p>对于预构建或者自行创建的 img 来说，文件系统中安装的包非常少，特别是上述使用的 ubuntu-18.04-arm64-docker 镜像，里面没有安装任何软件，连基本的 gcc 和 make 都没有，需要使用者自行安装。最好使用 chroot 的方式安装软件，不推荐在全系统模式下进行软件的安装，因为这会非常慢。</p>\n<p>GEM5 目录下建立 app-install.sh 文件：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#!/bin/bash</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">MNT</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #C3E88D\">~/GEM5/mnt</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/bin/mount</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-o</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">bind</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/sys</span><span style=\"color: #BABED8\"> $MNT</span><span style=\"color: #C3E88D\">/sys</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/bin/mount</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-o</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">bind</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/dev</span><span style=\"color: #BABED8\"> $MNT</span><span style=\"color: #C3E88D\">/dev</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/bin/mount</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-o</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">bind</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/proc</span><span style=\"color: #BABED8\"> $MNT</span><span style=\"color: #C3E88D\">/proc</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 连接网络需要，域名解析</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">cp</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/etc/resolv.conf</span><span style=\"color: #BABED8\"> $MNT</span><span style=\"color: #C3E88D\">/etc/</span></span></code></pre></div><p>进入目录~/GEM5/mnt 当中，执行以下命令：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">chroot</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">.</span></span></code></pre></div><p>在 x86 的 Host 机下对 arm 架构的文件系统进行 <code>chroot</code> 命令，大概率会出现以下错误：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>chroot: failed to run command ‘/bin/bash’: Exec format error</p></blockquote>\n<p><strong>大概率</strong>是 Host 机和 img 的架构不兼容，要么是 arm 和 x86 不兼容，要么就是 32 位和 64 位不兼容，32 位和 64 位不兼容好解决，下载位数对应的 img 即可，而 arm 和 x86 的不兼容需要进行一定设置。</p>\n<p>比如使用 x86Host 机，arm64 架构的 img，需要安装 qemu-user-static，这是 QEMU 用户模式下的 arm 仿真器。通过 qemu-arm-static，可以在 x86 的 Host 机上模拟 arm 处理器，就像运行在 arm 上一样进行各种操作。</p>\n<p>安装该软件，并将 <strong>qemu-aarch64-static</strong> 文件复制到 img 中：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">apt-get</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">install</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">qemu-user-static</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 64位执行下面命令</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">cp</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/usr/bin/qemu-aarch64-static</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">~/GEM5/mnt/usr/bin</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 32位执行下面的命令</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># sudo cp /usr/bin/qemu-arm-static ~/GEM5/mnt/usr/bin</span></span></code></pre></div><p>现在可以正常 chroot。</p>\n<p>完成 chroot 命令后进入到 img 的根目录中，需要对软件源做一些基本配置：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">apt-get</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">update</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 安装一些非常基本的命令，比如下面将要用到的add-apt-repository</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">apt-get</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">install</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">software-properties-common</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">add-apt-repository</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">universe</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">apt-get</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">update</span></span></code></pre></div><p>在此基础上设置更新软件源并安装一些常用软件：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">add-apt-repository</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">ppa:ubuntu-toolchain-r/test</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">apt-get</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">update</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">apt-get</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">install</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">gcc-9</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">g++-9</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">make</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">wget</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">git</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">vim</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">--fix-missing</span></span></code></pre></div><p>上面在添加源的时候，可能会遇到添加失败的情况：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>ERROR: user or team does not exist</p></blockquote>\n<p>一般是证书出了问题，需要<a href=\"https://blog.csdn.net/leviopku/article/details/101060133\">重新安装</a>。</p>\n<p>默认安装的 gcc 版本是 7，这里需要使用 gcc-9 才能安装 9 以上的版本，但是此操作会在环境变量中添加 gcc-9/g++-9 的命令而不是 gcc/g++ 本身，需要建立动态链接：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #82AAFF\">cd</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/usr/bin</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 如果之前安装了gcc/g++，要先删除</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># rm gcc g++</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 建立动态链接，将gcc9/g++9链接至gcc/g++</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">ln</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-s</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">gcc-9</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">gcc</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">ln</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-s</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">g++-9</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">g++</span></span></code></pre></div><p>安装完毕退出 chroot，umount 镜像。</p>\n<p>修改 umount.sh 方便后面的执行：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#!/bin/bash</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">MNT</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #C3E88D\">~/GEM5/mnt</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">umount</span><span style=\"color: #BABED8\"> $MNT</span><span style=\"color: #C3E88D\">/proc</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">umount</span><span style=\"color: #BABED8\"> $MNT</span><span style=\"color: #C3E88D\">/dev</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">umount</span><span style=\"color: #BABED8\"> $MNT</span><span style=\"color: #C3E88D\">/sys</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">umount</span><span style=\"color: #BABED8\"> $MNT</span></span></code></pre></div><p>执行下列命令：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #82AAFF\">exit</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">./umount.sh</span></span></code></pre></div><h4 id=\"配置代理\"><a href=\"#配置代理\" class=\"headerlink\" title=\"配置代理\"></a>配置代理</h4><p>配置代理和普通 Ubuntu 配置类似，注意要安装 curl 工具（同时保证基本的联网），以及良好的开关 proxy 和服务的习惯</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">apt-get</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">install</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">curl</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">--fix-missing</span></span></code></pre></div><h3 id=\"CheckPoint\"><a href=\"#CheckPoint\" class=\"headerlink\" title=\"CheckPoint\"></a>CheckPoint</h3>","feature":true,"text":"这篇文章主要介绍了在Ubuntu上部署gem5的方法，包括系统调用和全系统模拟两种模式。详细讲述了如何搭建环境、安装依赖、克隆源码、编译源码、检验是否成功、解决内存不足问题和全系统模式搭建等内容。此外，文章还给出了详细的参数设置和组件安装流程，适合gem5初学者阅读参考。...","permalink":"/post/gem5 基本部署","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"工程技术","slug":"工程技术","count":3,"path":"api/categories/工程技术.json"}],"tags":[{"name":"Gem5","slug":"Gem5","count":1,"path":"api/tags/Gem5.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#gem5-%E5%9F%BA%E6%9C%AC%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">gem5 基本部署</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gem5-SE-%E6%A8%A1%E5%BC%8F%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">gem5 SE 模式搭建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%9D%E8%B5%96%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">依赖安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gem5-%E6%BA%90%E7%A0%81%E5%85%8B%E9%9A%86\"><span class=\"toc-text\">gem5 源码克隆</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E6%BA%90%E7%A0%81\"><span class=\"toc-text\">编译源码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A3%80%E9%AA%8C%E6%98%AF%E5%90%A6%E6%88%90%E5%8A%9F\"><span class=\"toc-text\">检验是否成功</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%EF%BC%9APython-%E6%8A%A5%E9%94%99\"><span class=\"toc-text\">问题：Python 报错</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%EF%BC%9A%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3\"><span class=\"toc-text\">问题：内存不足</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#gem5-FS-%E6%A8%A1%E5%BC%8F%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">gem5 FS 模式搭建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%84%E6%9E%84%E5%BB%BA%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">预构建组件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E6%9E%84%E5%BB%BA%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">自构建组件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#fs-py-%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">fs.py 常用参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Debug-flag\"><span class=\"toc-text\">Debug-flag</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E5%85%A8%E7%B3%BB%E7%BB%9F%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">简单全系统测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">环境变量</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9-img-%E8%BF%9B%E8%A1%8C%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">对 img 进行基本设置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%82-%E5%8D%B8%E8%BD%BD%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">挂&#x2F;卸载镜像</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%A9%E5%AE%B9\"><span class=\"toc-text\">扩容</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">图形化界面方式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">命令行方式</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6\"><span class=\"toc-text\">安装软件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">配置代理</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CheckPoint\"><span class=\"toc-text\">CheckPoint</span></a></li></ol></li></ol></li></ol>","author":{"name":"Lucas Zhang","slug":"blog-author","avatar":"/img/refrain.jpg","link":"/","description":"<p>夜阑卧听风吹雨</p>Over The Hill.","socials":{"github":"https://github.com/FailureJack","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/13432006?spm_id_from=333.337.0.0"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/failurer"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/failurejack"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/failurer/"}}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"Linux:远程服务器基本配置","uid":"e11309200b51d3994997c0a4fbb9bd23","slug":"Linux远程服务器基本配置","date":"2023-12-27T12:02:14.000Z","updated":"2023-12-29T04:09:25.592Z","comments":false,"path":"api/articles/Linux远程服务器基本配置.json","keywords":null,"cover":"/cover/Linux远程服务器基本配置.png","text":"这篇文章详细介绍了如何在本地计算机和远程Linux服务器之间进行高效稳定的文件传输，提供了多种方法，如VPN跳板机访问内网服务器、ssh免密登录和文件传输等。同时，文章还解释了如何使用VSCode进行拖拽式文件传输，并建议使用ssh连接的服务器端开发。此外，文章还涉及了其他网络问题的解决方案。...","permalink":"/post/Linux远程服务器基本配置","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"工程技术","slug":"工程技术","count":3,"path":"api/categories/工程技术.json"}],"tags":[{"name":"远程服务器","slug":"远程服务器","count":1,"path":"api/tags/远程服务器.json"},{"name":"Markdown","slug":"Markdown","count":1,"path":"api/tags/Markdown.json"},{"name":"文件传输","slug":"文件传输","count":1,"path":"api/tags/文件传输.json"}],"author":{"name":"Lucas Zhang","slug":"blog-author","avatar":"/img/refrain.jpg","link":"/","description":"<p>夜阑卧听风吹雨</p>Over The Hill.","socials":{"github":"https://github.com/FailureJack","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/13432006?spm_id_from=333.337.0.0"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/failurer"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/failurejack"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/failurer/"}}}},"feature":true}}