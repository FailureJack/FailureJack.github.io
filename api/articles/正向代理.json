{"title":"正向代理","uid":"c1ec9505ed5e2baed7a2c980a22bec5a","slug":"正向代理","date":"2023-11-25T11:13:30.102Z","updated":"2023-12-29T04:09:25.594Z","comments":true,"path":"api/articles/正向代理.json","keywords":null,"cover":"/cover/正向代理.png","content":"<h1 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h1><h2 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h2><h2 id=\"流量转发\"><a href=\"#流量转发\" class=\"headerlink\" title=\"流量转发\"></a>流量转发</h2><p>基于上面的原理，现使用 shadowsocks 工具实现代理服务器的流量转发</p>\n<h3 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h3><p>在 Ubuntu22.04 上安装 shadowsocks：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">apt-get</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">install</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">shadowsocks-libev</span></span></code></pre></div><p>写一个配置脚本 shadowsock.json 配置代理的端口号和密码（主要是这两个）：</p>\n<div class=\"language-json\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">json</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #89DDFF\">{</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C792EA\">server</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #89DDFF\">:[</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C3E88D\">::0</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #89DDFF\">,</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C3E88D\">0.0.0.0</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #89DDFF\">],</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C792EA\">server_port</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #F78C6C\">1080</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C792EA\">local_port</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #F78C6C\">1080</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C792EA\">password</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C3E88D\">123456</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C792EA\">timeout</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #F78C6C\">60</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C792EA\">method</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C3E88D\">aes-256-gcm</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C792EA\">mode</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #89DDFF\">:</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C3E88D\">tcp_and_udp</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #89DDFF\">,</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C792EA\">fast_open</span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #89DDFF\">:false</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF\">}</span></span></code></pre></div><p>在同级目录下写一个启动脚本：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">ss-server</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-c</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">./shadowsocks.json</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-f</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">start</span></span></code></pre></div><ul>\n<li>-c 的意思是指定配置文件（json）</li>\n<li>-f 的意思是以守护线程的方式运行，后面需要接参数 pid file，这里省略的话会默认在同级目录下新建一个 start 文件存放进程的 pid</li>\n</ul>\n<p>同级目录下再写一个关闭脚本 shutdown.sh 如下：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\">#!/bin/bash</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 读取start文件中的PID</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">pid</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">$(</span><span style=\"color: #FFCB6B\">cat</span><span style=\"color: #C3E88D\"> start</span><span style=\"color: #89DDFF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 检查PID是否存在</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">if</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">ps</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-p</span><span style=\"color: #BABED8\"> $pid </span><span style=\"color: #89DDFF\">&gt;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/dev/null</span><span style=\"color: #89DDFF\">;</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF; font-style: italic\">then</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #676E95; font-style: italic\"># 进程存在，关闭它</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">kill</span><span style=\"color: #BABED8\"> $pid</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">echo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C3E88D\">进程已关闭</span><span style=\"color: #89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">else</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #676E95; font-style: italic\"># 进程不存在</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">    </span><span style=\"color: #82AAFF\">echo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">\"</span><span style=\"color: #C3E88D\">进程不存在</span><span style=\"color: #89DDFF\">\"</span></span>\n<span class=\"line\"><span style=\"color: #89DDFF; font-style: italic\">fi</span></span></code></pre></div><p>或者用暴力办法，查进程强行 kill 即可：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 查ss-server的进程，一般是两个，删掉自己运行的那个（注意看命令行信息）</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">ps</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-ef</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">grep</span><span style=\"color: #BABED8\"> [s]s-server</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 强制kill掉就行</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">kill</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-9</span></span></code></pre></div><p>记得为两个脚本赋权：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">chmod</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">+x</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">start.sh</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">chmod</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">+x</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">shutdown.sh</span></span></code></pre></div><h4 id=\"开机自启\"><a href=\"#开机自启\" class=\"headerlink\" title=\"开机自启\"></a>开机自启</h4><p>本人查过大量的网上资料，也动手实践过，目前并未找到非常好的方法实现开机自启，可能的原因包括但不限于：</p>\n<ol>\n<li>开机自启的方法问题（简单的脚本我开机自启成功过）</li>\n<li>shadowsocks-libev 的版本问题（可以快速试一试，去 github 的 shadowsocks 官方）</li>\n<li>shadowsocks 本身的问题（开源项目，背后可能没有公司维护）</li>\n</ol>\n<p>因为服务器一般不关机，就让程序一直运行即可，必要的时候查进程号给 kill 掉就行：</p>\n<p>同时注意要在防火墙放行端口，具体的方式可以在下面的<strong>机场代理</strong>小节查看</p>\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><p>安装 shadowsocks GUI 客户端，windows 平台可以安装下面仓库的便携版：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>github 上找了大半天，基于命令行的挺多的，基于 GUI 的基本上都是上面的仓库，也有 Debian 上 GUI 的，但是 Debian 上为何不基于命令行？基于 GUI 的大多数是便携版，也能开机自启，够用了</p></blockquote>\n<p>右键点击图标，点击“服务器”，点击“编辑服务器”，填入代理地址信息：</p>\n<p align=\"center\"><img src=\"/img/正向代理/UXRJbdsjyo7btdxYFTZcxmfKnKg.png\"></p>\n\n<p align=\"center\"><img src=\"/img/正向代理/GB6kb5SQko1RKCx88NKcxJStnJd.png\"></p>\n\n<div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #BABED8\">ipv6 address: </span><span style=\"color: #F78C6C\">2401</span><span style=\"color: #BABED8\">:ec00:</span><span style=\"color: #F78C6C\">15</span><span style=\"color: #BABED8\">:</span><span style=\"color: #F78C6C\">1008</span><span style=\"color: #BABED8\">:f2d4:e2ff:fee7:</span><span style=\"color: #F78C6C\">8004</span></span>\n<span class=\"line\"><span style=\"color: #BABED8\">prot: </span><span style=\"color: #F78C6C\">1080</span></span></code></pre></div><p>勾选“全局模式”，然后可以在“帮助”里选择“显示日志”查看流量转发情况。</p>\n<h3 id=\"APP-代理\"><a href=\"#APP-代理\" class=\"headerlink\" title=\"APP 代理\"></a>APP 代理</h3><p>启用了上述代理后，一般浏览器都是可以正常代理的，一般软件都是不可以代理的。想要让软件的流量也被转发到代理服务器，一般通过软件自己的设置走代理，具体如下：</p>\n<p align=\"center\"><img src=\"/img/正向代理/S4rRbLetGovvSFxa9gdc3K1tnJc.png\"></p>\n\n<p>这样的方式是比较简洁的方式，但是有的软件不提供代理，比如阿里云盘，这个时候就需要进行非常底层的全局代理软件来实现。</p>\n<p>最绝对的方式是<strong>透明代理</strong>，也就是在路由器上设置代理，目前没有硬件条件无法实现。</p>\n<p>最底层的代理软件似乎是 <strong>SSTap</strong>，它是通过建立虚拟网卡，将应用的流量走虚拟网卡，在虚拟网卡出对流量进行代理，但是好像对 Shadowsocks 的支持不是很好（对 ShadowSocksR 的支持较好？），我自己目前没成功，以后可以探究一下 ou_7f6ee51dd49317f10f80a0409adf4dc7</p>\n<p>目前使用成功的代理软件是 <strong>Proxifier</strong>，可以代理许多常用的软件（有些软件还是无法代理，比如 ToDesk）</p>\n<p>需要合理设置软件完成代理，在此之前，可以先不考虑连通性而关闭 ShadowSocks 的代理。下面将主要配置软件菜单栏的 Profile 部分：</p>\n<p align=\"center\"><img src=\"/img/正向代理/VYqnbLXZxoqYoCxnlQCcXvjdnKb.png\"></p>\n\n<h3 id=\"IPV6-绕过校园网\"><a href=\"#IPV6-绕过校园网\" class=\"headerlink\" title=\"IPV6 绕过校园网\"></a>IPV6 绕过校园网</h3><p>一般来说，校园网通过学号和 IPV4 计费，但是一般使用 IPV6 发流量校园网将不计分；基本原理是找一台支持 IPV6 的代理服务器，客户端将 IPV6 流量发送到服务器上，服务器将 IPV6 流量转为 IPV4 发送给目标服务器，再取回。</p>\n<p>值得一提的是，购买的机场服务器，是默认支持 IPV6 的，可以正常进行转发（个人购买的机场链接不支持 ShadowSocksR，进而使用 clash），配置如下：</p>\n<p align=\"center\"><img src=\"/img/正向代理/L1k3bryaeoBCqVxJhkhc5v1Knmh.png\"></p>\n\n<p>更厉害的校园网白嫖方法见博客（涉及非常细节和底层的网络原理）：</p>\n<h2 id=\"曲线“翻墙”\"><a href=\"#曲线“翻墙”\" class=\"headerlink\" title=\"曲线“翻墙”\"></a>曲线“翻墙”</h2><p>正向代理的很大一个用处就是“翻墙”，“翻墙”主要是指访问 github 和 google，而此处的“曲线救国”是指在目标机器不配置代理的情况下，如何拿到上述两者的资源。但是如果需要访问墙外的资源，无论如何还是需要“翻墙”，只不过是直接和间接的区别。</p>\n<h3 id=\"gitee-中转\"><a href=\"#gitee-中转\" class=\"headerlink\" title=\"gitee 中转\"></a>gitee 中转</h3><p>对于 github 的仓库，其实很简单可以通过 gitee 进行转存，可以直接用 url 转存，也可以 gitee 绑定 github 账号，先用 github 账号 fork 之后再转存。这样做的好处就是目标机器会比较干净，且基于图像界面的操作虽然繁琐却比较简单。缺点就是在编译某些仓库时，会有许多依赖项需要去 github 上拉取，如果手动一个一个转存会非常花时间。</p>\n<p>gitee 还可以看作一个中转站，不仅仅可以用于中转代码，还可以用于中转编译后的 obj，普通文件等等。但是其一次 push 的大小有限制，仓库的大小也有限制。</p>\n<h3 id=\"修改-hosts-访问-github\"><a href=\"#修改-hosts-访问-github\" class=\"headerlink\" title=\"修改 hosts 访问 github\"></a>修改 hosts 访问 github</h3><p>国内无法访问 github 的原因主要是 DNS 污染，可以通过使用工具查询 github 网站正确 IP，修改 hosts 文件实现访问 github。</p>\n<p>首先使用 <a href=\"https://tool.chinaz.com/dns\">IP 查询工具</a>分别查询下面两个域名的 IP 地址：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 适用于 https方式的克隆</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">github.com</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">github.global.ssl.fastly.net</span></span></code></pre></div><p>查询得到地址后，修改 hosts 文件：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># Linux的 hosts文件目录</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">/etc/hosts</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># Windows的 hosts文件目录</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">C:\\Windows\\System32\\drivers\\etc\\hosts</span></span></code></pre></div><p>在本机环回地址 localhost 后面添加上述的两个域名以及其 IP（需要管理员权限，linux 下使用 sudo vim 进行编辑）：</p>\n<div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #babed8\">127.0.0.1       localhost</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">**20.205.243.166  github.com**</span></span>\n<span class=\"line\"><span style=\"color: #babed8\">**199.96.58.15    github.global.ssl.fastly.net**</span></span></code></pre></div><p>修改后刷新 DNS 缓存：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># Ubuntu下</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/etc/init.d/dns-clean</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">start</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># Windows Terminal下</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">ipconfig</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/flushdns</span></span></code></pre></div><p>注意，上述手动方式修改 hosts 的方法虽然简单干净，但是由于 IP 地址时常发生变化，上述修改过一段时间后就容易失效，需要重新手动修改，会比较麻烦。网上会有一些<a href=\"https://blog.csdn.net/e_00c/article/details/83618559?ydreferer=aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS8=\">自动刷新的脚本</a>可以参考，但本人没有试过。</p>\n<h3 id=\"虚拟机流量转发\"><a href=\"#虚拟机流量转发\" class=\"headerlink\" title=\"虚拟机流量转发\"></a>虚拟机流量转发</h3><p>如果是使用的虚拟机，则可以让 <a href=\"http://lihuaxi.xjx100.cn/news/78969.html?action=onClick\">Host 机转发虚拟机的流量</a>，如果 Host 机可以访问外网，则虚拟机也可以访问外网。</p>\n<p>本质上是使用 Clash For Windows 等代理软件的“Allow LAN”功能，因在 Windows 上配置代理相比 Linux 要简单得多：</p>\n<p align=\"center\"><img src=\"/img/正向代理/WR4Bbd2N7oXnqBxa8iAck7bAnQc.png\"></p>\n\n<p>打开上述功能，同时可以看到代理端口是 7890，现找到虚拟机的 IP 地址，输入 win+r，打开 cmd，输入 ipconfig</p>\n<p>找到 <code>VMware Network Adapter VMnet8</code>（默认使用 VMware 配置虚拟机，且网络方面是默认配置），其中 IPv4 的地址就是虚拟机的 IP 地址：</p>\n<p align=\"center\"><img src=\"/img/正向代理/Lw9AbE6mYolsSIxTY5Bca37Qnld.png\"></p>\n\n<p>进入 Ubuntu（其他 Linux 发行版应该也是类似的流程），打开<strong>设置-&gt; 网络设置-&gt; 网络代理</strong>（不同系统名字会有些许差异，但大体意思都一样，就是代理的意思，<strong>注意不是<strong><strong>VPN</strong></strong>，是代理！！！</strong>），然后手动添加 HTTP 和 HTTPS 代理，IP 地址和端口如上所述：</p>\n<p align=\"center\"><img src=\"/img/正向代理/GYOjbsZ6fodTGOxTzc8cFUCpnLf.png\"></p>\n\n<p>上述操作可以在 Chrome 等浏览器中可以访问外网，但有时需要终端走代理（如 pip、apt-get、yum 等），这时针对需要走代理的用户做如下设置：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">export</span><span style=\"color: #BABED8\"> http_proxy</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">http://192.168.112.1:7890</span><span style=\"color: #89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">export</span><span style=\"color: #BABED8\"> https_proxy</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">http://192.168.112.1:7890</span><span style=\"color: #89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">export</span><span style=\"color: #BABED8\"> ALLOW_PROXY</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">http://192.168.112.1:7890</span><span style=\"color: #89DDFF\">'</span></span></code></pre></div><p>如果只在 terminal 输入上述结果，只会当前 terminal 生效，需要永久生效则需要写入 <code>~/.bashrc</code> 文件中</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">vim</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">~/.bashrc</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 输入下面内容，使用wq保存退出</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># export http_proxy='http://192.168.112.1:7890'</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># export https_proxy='http://192.168.112.1:7890'</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 使立即生效</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">source</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">~/.bashrc</span></span></code></pre></div><h2 id=\"机场代理\"><a href=\"#机场代理\" class=\"headerlink\" title=\"机场代理\"></a>机场代理</h2><p>真正要访问外网，还是需要外网服务器。可以自行去 <a href=\"https://my.vultr.com/\">Vultr</a> 购买，然后类似上面流量转发配置自己的服务器（注意防火墙放行端口）。还有一种是购买代理服务，也就是常说的“机场”，机场会为用户配置好代理服务器，用户只需用代理工具连接即可。</p>\n<p>机场代理需要首先订阅机场链接；使用的代理软件是 <a href=\"https://github.com/Dreamacro/clash\">clash</a> 的 linux 版本，并且整合 clash 的 GUI 组件 <a href=\"https://github.com/haishanh/yacd\">yacd</a>（ClashDashboard），具体的信息可以自行查看 github 仓库 <a href=\"https://github.com/wanhebin/clash-for-linux\">clash-for-linux</a>。</p>\n<p>这里以阿里云 ECS 服务器为例，介绍如何为远程服务器配置代理。</p>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><p>克隆仓库：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 可以访问github使用下面的链接</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">git</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">clone</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">https://github.com/wanhebin/clash-for-linux.git</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 无法访问github使用本人公开的仓库</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">git</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">clone</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">https://gitee.com/failurejack/clash-for-linux.git</span></span></code></pre></div><p>设置订阅链接和密码：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #82AAFF\">cd</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">clash-for-linux</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">vim</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">.env</span></span></code></pre></div><p align=\"center\"><img src=\"/img/正向代理/T458bUMKroVOd9xCJhdcA7RwnSf.png\"></p>\n\n<p>CLASH_URL 处粘贴为你个人的订阅地址，CLASH_SECRET 处写上 ClashDashboard 的登录密码，如何此处为空，将随机生成字符串，并在后面的启动中打印到控制台。</p>\n<p align=\"center\"><img src=\"/img/正向代理/SRrMblWx5o1YmKxIDnZccgmfnRe.png\"></p>\n\n<p>启动 clash-for-linux</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 这里确保要使用 sudo 和 bash 执行</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">bash</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">start.sh</span></span></code></pre></div><p>正常情况下终端打印如下：</p>\n<p align=\"center\"><img src=\"/img/正向代理/UJ1Xb6t1coVkbHxKbzec09iwn1b.png\"></p>\n\n<p>可以看到 GUI 的密码和地址在控制台中被打印出来，有关 Dashboard 的问题，将在下一小节<strong>“GUI 配置”</strong>叙述。</p>\n<p>先查看各种服务进程是否已经启动：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">netstat</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-tln</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">grep</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-E</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">9090|789.</span><span style=\"color: #89DDFF\">'</span></span></code></pre></div><p>正常情况结果如下：</p>\n<p align=\"center\"><img src=\"/img/正向代理/TkJubjtDwoU8cjx0duzc0EisnVf.png\"></p>\n\n<p>上述四个端口号代表的进程都启动时，证明连接已经建立，此时只需要将流量代理到 <code>http://127.0.0.1:7890</code> 即可。由于在远程服务器上主要使用 terminal 工作，因此这里介绍如何在在 terminal 中开启代理。</p>\n<p>与<strong>“<strong><strong>虚拟机</strong></strong>流量转发”</strong>章节中类似，在 terminal 代理流量分为暂时性代理和永久代理。暂时性代理只会在当前 terminal 生效，新建或切换为其他 terminal 都无效，具体方法就是输入如下代理命令：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C792EA\">export</span><span style=\"color: #BABED8\"> http_proxy</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">http://127.0.0.1:7890</span><span style=\"color: #89DDFF\">'</span></span>\n<span class=\"line\"><span style=\"color: #C792EA\">export</span><span style=\"color: #BABED8\"> https_proxy</span><span style=\"color: #89DDFF\">=</span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">http://127.0.0.1:7890</span><span style=\"color: #89DDFF\">'</span></span></code></pre></div><p>永久生效就是将上述内容写入 <code>~/.bashrc</code> 文件末尾。</p>\n<p>然而，有时候需要频繁开关代理，因此 clash-for-linux 采用了更为方便的方法（其实就是写了 shell 脚本）：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 加载环境变量</span></span>\n<span class=\"line\"><span style=\"color: #82AAFF\">source</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">/etc/profile.d/clash.sh</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 开启代理</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">proxy_on</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 查看环境变量中的代理</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">env</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">|</span><span style=\"color: #BABED8\"> </span><span style=\"color: #FFCB6B\">grep</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">-E</span><span style=\"color: #BABED8\"> </span><span style=\"color: #89DDFF\">'</span><span style=\"color: #C3E88D\">http_proxy|https_proxy</span><span style=\"color: #89DDFF\">'</span></span></code></pre></div><p>即加载 <code>/etc/profile.d/clash.sh</code> 脚本文件中所设置的环境变量，以便在当前 shell 会话中使用。这个文件定义了 proxy_on 和 proxy_off 两个函数供调用，可以方便地开关代理（注意是当前 terminal 生效）。正常情况输出如下：</p>\n<p align=\"center\"><img src=\"/img/正向代理/X9WYbdbC7oujfCxW7wccxjJ0nnb.png\"></p>\n\n<p>如果换了 terminal，只需要输入命令 <code>source /etc/profile.d/clash.sh</code> 即可正常使用。此时可以科学上网：</p>\n<p align=\"center\"><img src=\"/img/正向代理/UNRZb7NMroF3SvxUkqrcFNn0nGf.png\"></p>\n\n<p>由于服务器重启次数较少，因此 clash 的四个进程可以保持开启，若是重启了服务器，重启该进程即可（代理进程一般也没多重要），没必要配置开机启动、守护进程等。这简单介绍一下服务的关闭：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 这里确保要使用 sudo 和 bash 执行，**注意一定是shutdown.sh而不是shutdown，shutdown是关机**</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">bash</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">shutdown.sh</span></span></code></pre></div><h3 id=\"GUI-配置\"><a href=\"#GUI-配置\" class=\"headerlink\" title=\"GUI 配置\"></a>GUI 配置</h3><p>上述命令行的配置是通用的，一般而言配置成功后机场会自动选择节点，可以正常科学上网。但是想要切换节点或者其他方面的应用则需要配置 GUI。</p>\n<h4 id=\"Clash-Dashboard\"><a href=\"#Clash-Dashboard\" class=\"headerlink\" title=\"Clash Dashboard\"></a>Clash Dashboard</h4><p>上述启动的四个 clash 的进程中，端口号为 9090 的是 Dashboard 的进程：</p>\n<p align=\"center\"><img src=\"/img/正向代理/KLQnbNYozour91x19Gtc6S88nLf.png\"></p>\n\n<p>如果本机有 GUI 界面，则直接打开浏览器，输入地址 <code>http://127.0.0.1:9090/ui</code> 访问 Dashboard：</p>\n<p align=\"center\"><img src=\"/img/正向代理/JfwXbQfOioC5tuxOwYZcVgVVnU5.png\"></p>\n\n<p>这里的 <code>API Base URL</code> 输入：<code>http://127.0.0.1:9090</code>，<code>Secret</code> 输入之前打印在 terminal 中的内容，我这里是 <code>123456</code>，点击 Add，会在下方新增一个带有*的区块，点击该区块进入控制界面：</p>\n<p align=\"center\"><img src=\"/img/正向代理/XTBdbC7aMoT43WxPjuPcuyaxnub.png\"></p>\n\n<p>点击 Proxies 即可切换节点，点击菜单栏的其他选项可以进行更高级的配置。如果是没有图形化界面的服务器，则需要远程访问部署在服务器上的网站（需要公网 IP）。</p>\n<p>首先启动了 9090 端口的进程后，需要服务器的防火墙放行。一般云服务器厂商不会配置放行 9090 端口，需要自行设置，或者直接关闭防火墙：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">ufw</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">disable</span></span></code></pre></div><p>此时可以仅靠阿里云 ECS 的安全组实现流量控制，但是终归安全性不是那么高，因此下面介绍如何配置防火墙：</p>\n<div class=\"language-bash\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">bash</span><pre class=\"shiki material-theme-palenight\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 先开启防火墙</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">ufw</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">enable</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 可以先看一下防火墙通过列表，查看是否允许9090端口通过</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">ufw</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">status</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 没有则允许9090端口建立tcp连接</span></span>\n<span class=\"line\"><span style=\"color: #FFCB6B\">sudo</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">ufw</span><span style=\"color: #BABED8\"> </span><span style=\"color: #C3E88D\">allow</span><span style=\"color: #BABED8\"> </span><span style=\"color: #F78C6C\">9090</span><span style=\"color: #C3E88D\">/tcp</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># 可以删除已经配置的通过</span></span>\n<span class=\"line\"><span style=\"color: #676E95; font-style: italic\"># sudo ufw delete allow 9090/tcp</span></span></code></pre></div><p>此时完成服务器防火墙的配置，还需配置 ECS 安全组。</p>\n<p>阿里云 ECS 在防火墙的基础上设置了一层虚拟防火墙，即 ECS 的安全组，需要配置放行 9090 端口。</p>\n<p>进入 ECS 控制台：<a href=\"https://www.aliyun.com/product/ecs\">https://www.aliyun.com/product/ecs</a></p>\n<p>点击进入目标服务器的管理界面：</p>\n<p align=\"center\"><img src=\"/img/正向代理/XrjPbPWlLoufeHxH3MHctW3Pnff.png\"></p>\n\n<p>切换到安全组选项卡，点击配置规则：</p>\n<p align=\"center\"><img src=\"/img/正向代理/BiftbG5yko7OHCxVOd3cIuT0naf.png\"></p>\n\n<p>ECS 默认出方向无需配置，能够从 ECS 服务器转发所有流量包，需要配置进入服务器的流量，即入方向：</p>\n<p align=\"center\"><img src=\"/img/正向代理/SCkxbCGSnofThdxcAsucX3dHnmg.png\"></p>\n\n<p>添加规则如下，注意端口范围手动输入 9090，授权对象为 0.0.0.0/0 允许任何 IP 访问，其他默认即可，点击保存。</p>\n<p align=\"center\"><img src=\"/img/正向代理/PkWSb9nBuoMBLix36pWcNYnvncd.png\"></p>\n\n<p>至此可以顺利访问 Dashboard。此时 IP 换成服务器公网 IP，使用浏览器访问 <code>http://47.120.34.224:9090/ui</code>，注意 IP 的不同，其他的操作跟本机上的操作一样。</p>\n<h4 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h4><p>配置浏览器的代理（也许可以在.bashrc 配置全局代理），这里以 Ubuntu 桌面版预装的火狐浏览器为例，打开火狐浏览器的设置，搜索 proxy，点击 Network Settings 中的 Settings 按钮：</p>\n<p align=\"center\"><img src=\"/img/正向代理/I8O8bGe0oocSzuxn3r0cF9mnnHb.png\"></p>\n\n<p>进入之后，勾选 Manual proxy configuration，HTTP Proxy 输入本机回环地址 127.0.0.1，端口为 7890，勾选 Also use this proxy for HTTPS，点击 OK 即可：</p>\n<p align=\"center\"><img src=\"/img/正向代理/ILVabaHn1o0Gh2xbH14cuYsPnJd.png\"></p>\n\n<p>至此可以通过浏览器科学上网。</p>\n","text":"以校园网访问谷歌为由，介绍如何配置正向代理服务器，涉及Clash、shadowsocks等多种代理方式，并补充无需代理的翻墙方式...","permalink":"/post/正向代理","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[{"name":"学术科研","slug":"学术科研","count":2,"path":"api/categories/学术科研.json"}],"tags":[{"name":"代理服务器","slug":"代理服务器","count":1,"path":"api/tags/代理服务器.json"},{"name":"流量转发","slug":"流量转发","count":1,"path":"api/tags/流量转发.json"},{"name":"正向代理","slug":"正向代理","count":1,"path":"api/tags/正向代理.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">正向代理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">基本原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%81%E9%87%8F%E8%BD%AC%E5%8F%91\"><span class=\"toc-text\">流量转发</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF\"><span class=\"toc-text\">服务端</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF\"><span class=\"toc-text\">开机自启</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF\"><span class=\"toc-text\">客户端</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#APP-%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">APP 代理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IPV6-%E7%BB%95%E8%BF%87%E6%A0%A1%E5%9B%AD%E7%BD%91\"><span class=\"toc-text\">IPV6 绕过校园网</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9B%B2%E7%BA%BF%E2%80%9C%E7%BF%BB%E5%A2%99%E2%80%9D\"><span class=\"toc-text\">曲线“翻墙”</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#gitee-%E4%B8%AD%E8%BD%AC\"><span class=\"toc-text\">gitee 中转</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9-hosts-%E8%AE%BF%E9%97%AE-github\"><span class=\"toc-text\">修改 hosts 访问 github</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%B5%81%E9%87%8F%E8%BD%AC%E5%8F%91\"><span class=\"toc-text\">虚拟机流量转发</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%BA%E5%9C%BA%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">机场代理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">基本使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#GUI-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">GUI 配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Clash-Dashboard\"><span class=\"toc-text\">Clash Dashboard</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8\"><span class=\"toc-text\">浏览器</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Lucas Zhang","slug":"blog-author","avatar":"/img/refrain.jpg","link":"/","description":"<p>夜阑卧听风吹雨</p>Over The Hill.","socials":{"github":"https://github.com/FailureJack","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/13432006?spm_id_from=333.337.0.0"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/failurer"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/failurejack"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/failurer/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"pimDB:From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories","uid":"af9363059dee9d3cec07c0eec58cd7d5","slug":"pimDB  From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories","date":"2023-11-28T11:02:22.098Z","updated":"2023-12-29T04:09:25.593Z","comments":true,"path":"api/articles/pimDB  From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories.json","keywords":null,"cover":"/cover/pimDB  From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories.png","text":"研究内存数据库的处理方法，探讨布局、层次和迁移对性能的影响，结果提高计算效率，同时研究页面布局、内存层次和迁移对性能的影响。...","permalink":"/post/pimDB  From Main-Memory DBMS to Processing-In-Memory DBMS-Engines on Intelligent Memories","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"工程技术","slug":"工程技术","count":3,"path":"api/categories/工程技术.json"}],"tags":[{"name":"页面布局","slug":"页面布局","count":1,"path":"api/tags/页面布局.json"},{"name":"内存层次结构","slug":"内存层次结构","count":1,"path":"api/tags/内存层次结构.json"},{"name":"数据迁移","slug":"数据迁移","count":1,"path":"api/tags/数据迁移.json"}],"author":{"name":"Lucas Zhang","slug":"blog-author","avatar":"/img/refrain.jpg","link":"/","description":"<p>夜阑卧听风吹雨</p>Over The Hill.","socials":{"github":"https://github.com/FailureJack","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/13432006?spm_id_from=333.337.0.0"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/failurer"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/failurejack"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/failurer/"}}}},"feature":true},"next_post":{"title":"函数零点","uid":"b101a6e059af61464126276089cefbed","slug":"函数零点","date":"2023-11-25T11:13:30.096Z","updated":"2023-12-29T04:09:25.593Z","comments":true,"path":"api/articles/函数零点.json","keywords":null,"cover":"/cover/函数零点.png","text":"探讨函数零点求解方法，包括一次、二次、三次函数以及一般函数。主要涉及的方法有公式解、二分搜索、牛顿方法簇等。...","permalink":"/post/函数零点","photos":[],"count_time":{"symbolsCount":"7.2k","symbolsTime":"7 mins."},"categories":[{"name":"学术科研","slug":"学术科研","count":2,"path":"api/categories/学术科研.json"}],"tags":[{"name":"函数零点","slug":"函数零点","count":1,"path":"api/tags/函数零点.json"},{"name":"解析解法","slug":"解析解法","count":1,"path":"api/tags/解析解法.json"},{"name":"计算解法","slug":"计算解法","count":1,"path":"api/tags/计算解法.json"}],"author":{"name":"Lucas Zhang","slug":"blog-author","avatar":"/img/refrain.jpg","link":"/","description":"<p>夜阑卧听风吹雨</p>Over The Hill.","socials":{"github":"https://github.com/FailureJack","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/13432006?spm_id_from=333.337.0.0"},"zhihu":{"icon":"/svg/zhihu.svg","link":"https://www.zhihu.com/people/failurer"},"gitee":{"icon":"/svg/gitee.svg","link":"https://gitee.com/failurejack"},"leetcode":{"icon":"/svg/leetcode.svg","link":"https://leetcode.cn/u/failurer/"}}}}}}